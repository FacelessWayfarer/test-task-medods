// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/FacelessWayfarer/test-task-medods/internal/service/models"
	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// GenerateTokens provides a mock function with given fields: ctx, userID, ip
func (_m *IService) GenerateTokens(ctx context.Context, userID string, ip string) (*models.GeneratedTokens, error) {
	ret := _m.Called(ctx, userID, ip)

	if len(ret) == 0 {
		panic("no return value specified for GenerateTokens")
	}

	var r0 *models.GeneratedTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.GeneratedTokens, error)); ok {
		return rf(ctx, userID, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.GeneratedTokens); ok {
		r0 = rf(ctx, userID, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GeneratedTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTokens provides a mock function with given fields: ctx, req, ip
func (_m *IService) UpdateTokens(ctx context.Context, req models.TokensToRefresh, ip string) (*models.RefreshedTokens, error) {
	ret := _m.Called(ctx, req, ip)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTokens")
	}

	var r0 *models.RefreshedTokens
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, models.TokensToRefresh, string) (*models.RefreshedTokens, error)); ok {
		return rf(ctx, req, ip)
	}
	if rf, ok := ret.Get(0).(func(context.Context, models.TokensToRefresh, string) *models.RefreshedTokens); ok {
		r0 = rf(ctx, req, ip)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshedTokens)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, models.TokensToRefresh, string) error); ok {
		r1 = rf(ctx, req, ip)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
