// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	time "time"

	mock "github.com/stretchr/testify/mock"

	tokens "github.com/FacelessWayfarer/test-task-medods/pkg/tokens"

	uuid "github.com/google/uuid"
)

// TokenCreator is an autogenerated mock type for the TokenCreator type
type TokenCreator struct {
	mock.Mock
}

// CreateRefreshTokenHash provides a mock function with given fields: refreshToken
func (_m *TokenCreator) CreateRefreshTokenHash(refreshToken string) []byte {
	ret := _m.Called(refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshTokenHash")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(refreshToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// CreateToken provides a mock function with given fields: userid, ip, duration
func (_m *TokenCreator) CreateToken(userid uuid.UUID, ip string, duration time.Duration) (string, *tokens.UserClaims, error) {
	ret := _m.Called(userid, ip, duration)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 string
	var r1 *tokens.UserClaims
	var r2 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, time.Duration) (string, *tokens.UserClaims, error)); ok {
		return rf(userid, ip, duration)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, string, time.Duration) string); ok {
		r0 = rf(userid, ip, duration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, string, time.Duration) *tokens.UserClaims); ok {
		r1 = rf(userid, ip, duration)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*tokens.UserClaims)
		}
	}

	if rf, ok := ret.Get(2).(func(uuid.UUID, string, time.Duration) error); ok {
		r2 = rf(userid, ip, duration)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// VerifyToken provides a mock function with given fields: tokenString
func (_m *TokenCreator) VerifyToken(tokenString string) (*tokens.UserClaims, error) {
	ret := _m.Called(tokenString)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 *tokens.UserClaims
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*tokens.UserClaims, error)); ok {
		return rf(tokenString)
	}
	if rf, ok := ret.Get(0).(func(string) *tokens.UserClaims); ok {
		r0 = rf(tokenString)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.UserClaims)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tokenString)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenCreator creates a new instance of TokenCreator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenCreator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenCreator {
	mock := &TokenCreator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
